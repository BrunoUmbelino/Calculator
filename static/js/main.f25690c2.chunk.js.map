{"version":3,"sources":["components/MainComponent.js","components/ButtonsComponent.js","App.js","index.js"],"names":["Main","props","state","disp","prev","exp","clearDisplay","bind","backspace","handleNumber","handleOperation","calculate","this","setState","slice","ev","length","input","target","innerText","dispWithOperator","test","includes","prevOpe","operator","replace","exec","expClean","startWitchOperator","endsWithOperator","alert","result","eval","toString","formattedRes","LimitError","className","id","React","Component","BtnValues","simb","Btns","map","item","clickBehavior","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f25690c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Btns from \"./ButtonsComponent\";\r\nimport { Container, Label, Row } from \"reactstrap\";\r\n\r\nexport class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      disp: \"0\",\r\n      prev: \"\",\r\n      exp: \"\",\r\n    };\r\n    this.clearDisplay = this.clearDisplay.bind(this);\r\n    this.backspace = this.backspace.bind(this);\r\n    this.handleNumber = this.handleNumber.bind(this);\r\n    this.handleOperation = this.handleOperation.bind(this);\r\n    this.calculate = this.calculate.bind(this);\r\n  }\r\n\r\n  clearDisplay() {\r\n    this.setState({ disp: `0`, exp: \"\" });\r\n  }\r\n\r\n  backspace() {\r\n    this.setState({\r\n      exp: this.state.disp.slice(0, -1),\r\n      disp: this.state.disp.slice(0, -1),\r\n    });\r\n  }\r\n\r\n  handleNumber(ev) {\r\n    if (this.state.disp.length > 15) return;\r\n\r\n    let input = ev.target.innerText;\r\n    const { disp, exp } = this.state;\r\n    const dispWithOperator = /[+/x]/g.test(disp);\r\n\r\n    if (input === \".\" && disp.includes(\".\")) return;\r\n    else if (input === \"0\" && disp === \"0\") return;\r\n    else if (disp === \"0\" || dispWithOperator) {\r\n      this.setState({ disp: input, exp: exp + input });\r\n    } else {\r\n      this.setState({\r\n        disp: disp + input,\r\n        exp: exp + input,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOperation(ev) {\r\n    if (this.state.disp.length > 15) return;\r\n\r\n    let { exp } = this.state;\r\n    let prevOpe = exp[exp.length - 1];\r\n    let operator = ev.target.innerText;\r\n    operator = operator.replace(/[÷]/, \"/\");\r\n    operator = operator.replace(/[x]/, \"*\");\r\n\r\n    if (\r\n      (/[+*/]/g.exec(prevOpe) && operator !== `-`) ||\r\n      (prevOpe === `-` && operator === \"-\")\r\n    ) {\r\n      operator = \"\";\r\n    } /// test 13\r\n    else if (prevOpe === \"-\" && operator === \"+\") {\r\n      let expClean = (exp = exp.replace(/[-+/*]/g, \"\"));\r\n      this.setState({\r\n        exp: expClean + operator,\r\n        disp: operator,\r\n        prev: prevOpe,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        exp: exp + operator,\r\n        disp: operator,\r\n        prev: prevOpe,\r\n      });\r\n    }\r\n  }\r\n\r\n  calculate() {\r\n    if (this.state.disp.length > 15) return;\r\n\r\n    const { exp } = this.state;\r\n    const startWitchOperator = /^[/*+-]+/.test(exp);\r\n    const endsWithOperator = /[x+‑/]+$/.test(exp);\r\n\r\n    if (!endsWithOperator && !startWitchOperator) {\r\n      const result = eval(exp).toString();\r\n      const formattedRes = result.slice(0, 15);\r\n\r\n      this.setState({\r\n        disp: formattedRes,\r\n        exp: formattedRes,\r\n      });\r\n    } else {\r\n      alert(\"Invalid expression\");\r\n      this.clearDisplay();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const LimitError = () => {\r\n      return <div className=\"error\">\"number of characters exceeded\"</div>;\r\n    };\r\n    return (\r\n      <div className=\"main\">\r\n        <div>\r\n          <Container className=\"calculator\">\r\n            <div>\r\n              <span>||</span>\r\n            </div>\r\n            <Row className=\"screen\">\r\n              <Label className=\"expression\">\r\n                {this.state.disp.length > 15 ? \"\" : this.state.exp}\r\n              </Label>\r\n              <Label id=\"display\">\r\n                {this.state.disp.length > 15 ? <LimitError /> : this.state.disp}\r\n              </Label>\r\n            </Row>\r\n            <Row>\r\n              <Btns\r\n                clearDisplay={this.clearDisplay}\r\n                handleNumber={this.handleNumber}\r\n                calculate={this.calculate}\r\n                backspace={this.backspace}\r\n                handleOperation={this.handleOperation}\r\n              />\r\n            </Row>\r\n          </Container>\r\n          <div>\r\n            <span className=\"by\">By Bruno Umbelino</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst BtnValues = [\r\n  { id: \"clear\", simb: \"AC\" },\r\n  { id: \"backspace\", simb: \"DEL\" },\r\n  { id: \"divide\", simb: \"÷\" },\r\n  { id: \"seven\", simb: \"7\" },\r\n  { id: \"eight\", simb: \"8\" },\r\n  { id: \"nine\", simb: \"9\" },\r\n  { id: \"multiply\", simb: \"x\" },\r\n  { id: \"four\", simb: \"4\" },\r\n  { id: \"five\", simb: \"5\" },\r\n  { id: \"six\", simb: \"6\" },\r\n  { id: \"subtract\", simb: \"-\" },\r\n  { id: \"one\", simb: \"1\" },\r\n  { id: \"two\", simb: \"2\" },\r\n  { id: \"three\", simb: \"3\" },\r\n  { id: \"add\", simb: \"+\" },\r\n  { id: \"zero\", simb: \"0\" },\r\n  { id: \"decimal\", simb: \".\" },\r\n  { id: \"equals\", simb: \"=\" },\r\n];\r\n\r\nconst Btns = (props) => {\r\n  const Btns = BtnValues.map((item) => {\r\n    let clickBehavior;\r\n\r\n    if (item.id === \"clear\") {\r\n      clickBehavior = props.clearDisplay;\r\n    } else if (item.id === \"equals\") {\r\n      clickBehavior = props.calculate;\r\n    } else if (item.id === \"backspace\") {\r\n      clickBehavior = props.backspace;\r\n    } else if (/[-+÷x]/.exec(item.simb)) {\r\n      clickBehavior = props.handleOperation\r\n    } else {\r\n      clickBehavior = props.handleNumber\r\n    }\r\n\r\n    return (\r\n      <Button key={item.id} id={item.id} onClick={clickBehavior}>\r\n        {item.simb}\r\n      </Button>\r\n    );\r\n  });\r\n  return <div className=\"btns\">{Btns}</div>;\r\n};\r\n\r\nexport default Btns;\r\n","import \"./App.css\";\r\nimport { Main } from \"./components/MainComponent\";\r\n\r\nfunction App() {\r\n  return <Main />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}